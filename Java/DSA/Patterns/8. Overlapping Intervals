Overlapping Intervals : The Overlapping Intervals pattern is used to merge or handle overlapping intervals in an array.

In an interval array sorted by start time, two intervals [a, b] and [c, d] overlap if b >= c (i.e., the end time of the first interval is greater than or equal to the start time of the second interval).

Where to use it : 
	- Merging Interval : Given different level of intervals merge all the overlapping intervals
		Input : [[1, 3], [2, 6], [8, 10], [15, 18]]

		Output : [[1, 6], [8, 10], [15, 18]]

	- Interval Intersection : Find the intersection between two set of interval
		Input : s1: [[0, 2], [5, 10], [13, 23], [24, 25]]  s2: [[1, 5], [8, 12], [15, 24], [25, 26]]
		
		Output : [[1, 2], [5, 5], [8, 10], [15, 23], [24, 24], [25, 25]]

	- Insert Interval : Add a inverval to a non overlaping interval
		Input : [[1, 2], [3, 5], [6, 7], [8, 10], [12, 16]] interval: [4, 8]

		Output : [[1, 2], [3, 10], [12, 16]]

	- Finding minimum number of meeting rooms needed for overlapping meetings


Problem Statement: Merge all overlapping intervals.

	Example:

		Input: intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]

		Output: [[1, 6], [8, 10], [15, 18]]

	Explanation:
		1. Sort the intervals by their start time.

		2. Create an empty list called merged to store the merged intervals.

		3. Iterate through the intervals and check if it overlaps with the last interval in the merged list.

		4. If it overlaps, merge the intervals by updating the end time of the last interval in merged.

		5. If it does not overlap, simply add the current interval to the merged list.

Code:

	import java.util.ArrayList;
	import java.util.Arrays;
	import java.util.List;

	public class MergeIntervals {
	    public static void main(String[] args) {
	        int[][] intervals = {{1, 3}, {2, 6}, {8, 10}, {15, 18}};
	        int[][] mergedIntervals = merge(intervals);

	        // Print the result
	        for (int[] interval : mergedIntervals) {
	            System.out.println(Arrays.toString(interval));
	        }
	    }

	    public static int[][] merge(int[][] intervals) {
	        if (intervals.length <= 1) {
	            return intervals; // No merging needed if there is only one interval
	        }

	        // Step 1: Sort the intervals based on their start times
	        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

	        List<int[]> merged = new ArrayList<>();
	        int[] currentInterval = intervals[0];

	        // Step 2: Traverse the sorted intervals and merge overlapping ones
	        for (int i = 1; i < intervals.length; i++) {
	            int[] nextInterval = intervals[i];

	            if (currentInterval[1] >= nextInterval[0]) {
	                // Overlapping intervals, merge them
	                currentInterval[1] = Math.max(currentInterval[1], nextInterval[1]);
	            } else {
	                // No overlap, add the current interval to the result and update currentInterval
	                merged.add(currentInterval);
	                currentInterval = nextInterval;
	            }
	        }

	        // Add the last interval
	        merged.add(currentInterval);

	        // Convert the list of intervals to an array
	        return merged.toArray(new int[merged.size()][]);
	    }
	}


	

Time Complexity :
Space Complexity :

LeetCode Problems:
	Merge Intervals (LeetCode #56)

	Insert Interval (LeetCode #57)

	Non-Overlapping Intervals (LeetCode #435)
