Two pointers : The Two Pointers pattern involves using two pointers to iterate through an array or list, often used to find pairs or elements that meet specific criteria.

Use this pattern when dealing with sorted arrays or lists where you need to find pairs that satisfy a specific condition.

Sample Problem:
	Find two numbers in a sorted array that add up to a target value.

	Example:

		Input: nums = [1, 2, 3, 4, 6], target = 6

		Output: [1, 3]

	Code :
		int n = nums.length;
		int r = 0, l = n - 1;
		while(r < l){
			int sum = nums[r] + nums[l];
			if(sum == target){
				return r, l;
			}else if(sum > target){
				l--;
			}else{
				r++;
			}
		}
		return null;

Explanation:
	Initialize two pointers, one at the start (left) and one at the end (right) of the array.

	Check the sum of the elements at the two pointers.

	If the sum equals the target, return the indices.

	If the sum is less than the target, move the left pointer to the right.

	If the sum is greater than the target, move the right pointer to the left.

Problem :
	Q) Check if the given string is palindrome or not

	Code : 
		public class PalindromeChecker {
		    public static void main(String[] args) {
		        String str = "A man, a plan, a canal, Panama";
		        boolean isPalindrome = isPalindrome(str);
		        System.out.println("Is the string a palindrome? " + isPalindrome);
		    }

		    public static boolean isPalindrome(String str) {
		        // Convert the string to lowercase and remove non-alphanumeric characters
		        str = str.toLowerCase().replaceAll("[^a-z0-9]", "");

		        // Initialize two pointers
		        int left = 0;
		        int right = str.length() - 1;

		        // Compare characters from both ends
		        while (left < right) {
		            if (str.charAt(left) != str.charAt(right)) {
		                return false; // Not a palindrome
		            }
		            left++;  // Move the left pointer inward
		            right--; // Move the right pointer inward
		        }
		        return true; // All characters matched
		    }
		}


LeetCode Problems:
	Two Sum II - Input Array is Sorted (LeetCode #167)

	3Sum (LeetCode #15)

	Container With Most Water (LeetCode #11)

