Sliding Window : The Sliding Window pattern is used to find a subarray or substring that satisfies a specific condition, optimizing the time complexity by maintaining a window of elements.

Use this pattern when dealing with problems involving contiguous subarrays or substrings.

Sample Problem:
	Find the maximum sum of a subarray of size k.

	Example:

	Input: nums = [2, 1, 5, 1, 3, 2], k = 3

	Output: 9


	Code :
		public class MaximumSumSubarray {
		    public static void main(String[] args) {
		        int[] nums = {2, 1, 5, 1, 3, 2};
		        int k = 3;
		        int result = findMaxSumSubarray(nums, k);
		        System.out.println("Maximum sum of a subarray of size " + k + " is: " + result);
		    }

		    public static int findMaxSumSubarray(int[] nums, int k) {
		        // Check if the array size is less than k
		        if (nums.length < k) {
		            throw new IllegalArgumentException("Array length must be greater than or equal to k.");
		        }

		        int maxSum = 0, windowSum = 0;

		        // Compute the sum of the first window
		        for (int i = 0; i < k; i++) {
		            windowSum += nums[i];
		        }

		        // Set the initial window sum as the maximum sum
		        maxSum = windowSum;

		        // Slide the window
		        for (int end = k; end < nums.length; end++) {
		            windowSum += nums[end] - nums[end - k]; // Add the next element and remove the first element of the previous window
		            maxSum = Math.max(maxSum, windowSum);  // Update the maximum sum
		        }

		        return maxSum;
		    }
		}


Explanation:
	Start with the sum of the first k elements.

	Slide the window one element at a time, subtracting the element that goes out of the window and adding the new element.

	Keep track of the maximum sum encountered.

Time Complexity: O(n): The array is traversed once, making the solution very efficient.

Space Complexity: O(1): No extra space is used except for a few variables.

Example Execution:
	input :	nums = [2, 1, 5, 1, 3, 2], k = 3

	Output: Maximum sum of a subarray of size 3 is: 9

	Explanation:

		Subarrays of size 𝑘 = 3
		[2, 1, 5] → Sum = 8
		
		[1, 5, 1] → Sum = 7
		
		[5, 1, 3] → Sum = 9
		
		[1, 3, 2] → Sum = 6
		
		Maximum sum =  9.

LeetCode Problems:
	Maximum Average Subarray I (LeetCode #643)

	Longest Substring Without Repeating Characters (LeetCode #3)

	Minimum Window Substring (LeetCode #76)
