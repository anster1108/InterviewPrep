What is Kadane's Algorithm?
	Kadane's Algorithm is used to find the maximum sum of a contiguous subarray within a one-dimensional numeric array. It's an efficient method that runs in O(n) time.

Algorithm Idea:
	The algorithm iterates through the array while maintaining two variables:

		1. currentSum: The maximum sum of the subarray ending at the current position.
		2. maxSum: The global maximum sum encountered so far.
	
	For each element, you decide whether to:

		- Include it in the current subarray.
		- Start a new subarray with this element.

Steps:
1. Initialize currentSum to 0 and maxSum to a very small number (like Integer.MIN_VALUE).
2. Traverse the array:
	- Add the current element to currentSum.
	- If currentSum becomes less than 0, reset it to 0 (start a new subarray).
	- Update maxSum if currentSum is greater than maxSum.
3. Return maxSum as the result.


Example:
	Input: −2, 1, −3, 4, −1, 2, 1, −5, 4

	Output: 6 (Subarray: 4,−1,2,1)

Explanation:

	Start iterating through the array while keeping track of the maximum sum.

Code :
	public class KadanesAlgorithm {
		public static void main(String[] args) {
		    int[] nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
		    int maxSum = maxSubArray(nums);
		    System.out.println("Maximum Subarray Sum: " + maxSum);
		}

		public static int maxSubArray(int[] nums) {
		    int maxSum = Integer.MIN_VALUE; // Global maximum sum
		    int currentSum = 0; // Current subarray sum

		    for (int num : nums) {
		        currentSum += num; // Add the current element to currentSum
		        maxSum = Math.max(maxSum, currentSum); // Update maxSum if currentSum is larger

		        if (currentSum < 0) {
		            currentSum = 0; // Reset currentSum if it goes negative
		        }
		    }

		    return maxSum;
		}
	}

Complexity:
	Time Complexity: O(n)
		Single traversal of the array.
	Space Complexity: O(1)
		No extra space is used.

Key Insights:
	1. Kadane's Algorithm works only for arrays with at least one non-negative number. If all numbers are negative, return the largest single element.
	
	2. It efficiently handles the problem by deciding at each step whether to include the current element or start fresh.

