Top K elements :  A super useful pattern to find the K largest/smallest/frequent element in a data set.

[Brute Force] A stright forward solution to such problems is to sort the data set and take the first/last K element. [sorting : O(nlogn)]

By this pattern we can convert the complexity from O(nlogn) to O(nlogk).

When to Use this Pattern :
 	Finding the Kth Largest or smallest element in an array.

 	Identifying the K most frequently or least frequent element in a dataset.

 	Dynamicaly maintain the Top K elements in a real time datastream.
 		Like keeping track of the live top 10 scores in a competetion.

How to Implement Top K element : 
	Q) Finding the Kth Largest element in an array.
		Input: nums = [3, 2, 1, 5, 6, 4], k = 2

		Output: 5

	Sol : Here we uses the concept of Heaps[Max-Heap or Min-Heap]

		Max-Heap : The parent node is larger that its children
		Min-Heap : The parent node is smaller than its children

		The heap maintains this property when ever we add or delete any elements from it.

		Max-Heap : 
			1. Here we take a Max-Heap, and convert the array to a Max-Heap, also know as Heapify. [ O(n) ]
			2. Pop the top K elements from the heap [ O(Klogn) ] { 6, 5 }

		Min-Heap : 
			1. Use a min-heap of size k to keep track of the k largest elements.
			2. Iterate through the array, adding elements to the heap.
			3. If the heap size exceeds k, remove the smallest element from the heap.
			4. The root of the heap will be the k-th largest element.


Code :
	class Solution{
		public int[] findTopKLargest(int[] nums, int k){
			PriorityQueue<Integer> minHeap = new PriorityQueue<>();
			for(int i = 0; i < k; i++){
				minHeap.add(nums[i]); // O(klogn)
			}

			for(int i = k; i < nums.length; i++){
				minHeap.add(nums[i]); 
				if(minHeap.size > k){
					minHeap.poll(); // O((n - k) * logk)
				}
			}

			int[] res = new int[k];
			for(int i = 0; i < k; i++){
				res[i] = minHeap.poll();
			}

			return res;
		}
	}

Time Complexity : O(nlogk)

Space Complexity : O(k)


LeetCode Problems:
	Kth Largest Element in an Array (LeetCode #215)

	Top K Frequent Elements (LeetCode #347)

	Find K Pairs with Smallest Sums (LeetCode #373)

